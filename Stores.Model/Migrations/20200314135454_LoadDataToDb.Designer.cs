// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Store.Model.Context;

namespace Stores.Model.Migrations
{
    [DbContext(typeof(StoresDbContext))]
    [Migration("20200314135454_LoadDataToDb")]
    partial class LoadDataToDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Stores.Model.Entity.Production.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("brand_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .HasColumnName("brand_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("brands");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            BrandName = "Electra"
                        },
                        new
                        {
                            BrandId = 2,
                            BrandName = "Haro"
                        },
                        new
                        {
                            BrandId = 3,
                            BrandName = "Heller"
                        },
                        new
                        {
                            BrandId = 4,
                            BrandName = "Pure Cycles"
                        },
                        new
                        {
                            BrandId = 5,
                            BrandName = "Ritchey"
                        });
                });

            modelBuilder.Entity("Stores.Model.Entity.Production.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("category_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnName("category_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Children Bicycles"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Comfort Bicycles"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Cruisers Bicycles"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Cyclocross Bicycles"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Electric Bikes"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "Mountain Bikes"
                        });
                });

            modelBuilder.Entity("Stores.Model.Entity.Production.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("product_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnName("brand_id")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("int");

                    b.Property<decimal>("ListPrice")
                        .HasColumnName("list_price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ModelYear")
                        .HasColumnName("model_year")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductName")
                        .HasColumnName("product_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            BrandId = 1,
                            CategoryId = 3,
                            ListPrice = 550m,
                            ModelYear = new DateTime(2016, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Electra Townie Original 21D - 2016"
                        },
                        new
                        {
                            ProductId = 2,
                            BrandId = 4,
                            CategoryId = 3,
                            ListPrice = 430m,
                            ModelYear = new DateTime(2016, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Pure Cycles Vine 8-Speed - 2016"
                        },
                        new
                        {
                            ProductId = 3,
                            BrandId = 2,
                            CategoryId = 1,
                            ListPrice = 330m,
                            ModelYear = new DateTime(2017, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Haro Downtown 16 - 2017"
                        },
                        new
                        {
                            ProductId = 4,
                            BrandId = 2,
                            CategoryId = 1,
                            ListPrice = 210m,
                            ModelYear = new DateTime(2017, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Haro Shredder 20 - 2017"
                        },
                        new
                        {
                            ProductId = 5,
                            BrandId = 5,
                            CategoryId = 6,
                            ListPrice = 380m,
                            ModelYear = new DateTime(2016, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Ritchey Timberwolf Frameset - 2016"
                        });
                });

            modelBuilder.Entity("Stores.Model.Entity.Production.Stock", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int");

                    b.HasKey("StoreId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("stocks");

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            ProductId = 1,
                            Quantity = 5
                        },
                        new
                        {
                            StoreId = 1,
                            ProductId = 2,
                            Quantity = 15
                        },
                        new
                        {
                            StoreId = 1,
                            ProductId = 3,
                            Quantity = 20
                        },
                        new
                        {
                            StoreId = 1,
                            ProductId = 4,
                            Quantity = 1
                        },
                        new
                        {
                            StoreId = 1,
                            ProductId = 5,
                            Quantity = 10
                        });
                });

            modelBuilder.Entity("Stores.Model.Entity.Sales.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("customer_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnName("zip_code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            City = "Orchard Park",
                            Email = "debra.burks@yahoo.com",
                            FirstName = "Debra",
                            LastName = "Burks",
                            Phone = "(516) 583-7761",
                            State = "NY",
                            Street = "9273 Thorne Ave.",
                            ZipCode = "14127"
                        },
                        new
                        {
                            CustomerId = 2,
                            City = "Campbell",
                            Email = "kasha.todd@yahoo.com",
                            FirstName = "Kasha",
                            LastName = "Todd",
                            Phone = "(212) 945-8823",
                            State = "CA",
                            Street = "910 Vine Street",
                            ZipCode = "95008"
                        },
                        new
                        {
                            CustomerId = 3,
                            City = "Redondo Beach",
                            Email = "tameka.fisher@aol.com",
                            FirstName = "Tameka",
                            LastName = "Fisher",
                            Phone = "(562) 215-2907",
                            State = "CA",
                            Street = "769C Honey Creek St.",
                            ZipCode = "90278"
                        },
                        new
                        {
                            CustomerId = 4,
                            City = "Uniondale",
                            Email = "daryl.spence@aol.com",
                            FirstName = "Daryl",
                            LastName = "Spence",
                            Phone = "(510) 246-8375",
                            State = "NY",
                            Street = "988 Pearl Lane",
                            ZipCode = "11553"
                        },
                        new
                        {
                            CustomerId = 5,
                            City = "Sacramento",
                            Email = "charolette.rice@msn.com",
                            FirstName = "Charolette",
                            LastName = "Rice",
                            Phone = "(916) 381-6003",
                            State = "CA",
                            Street = "107 River Dr.",
                            ZipCode = "95820"
                        });
                });

            modelBuilder.Entity("Stores.Model.Entity.Sales.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnName("order_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .HasColumnName("order_status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequiredDate")
                        .HasColumnName("required_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShippedDate")
                        .HasColumnName("shipped_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("StaffId")
                        .HasColumnName("staff_id")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StoreId");

                    b.ToTable("orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            CustomerId = 1,
                            OrderDate = new DateTime(2016, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Shipped",
                            RequiredDate = new DateTime(2016, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippedDate = new DateTime(2016, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StaffId = 1,
                            StoreId = 1
                        },
                        new
                        {
                            OrderId = 2,
                            CustomerId = 2,
                            OrderDate = new DateTime(2016, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Shipped",
                            RequiredDate = new DateTime(2016, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippedDate = new DateTime(2016, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StaffId = 1,
                            StoreId = 1
                        },
                        new
                        {
                            OrderId = 3,
                            CustomerId = 3,
                            OrderDate = new DateTime(2016, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Shipped",
                            RequiredDate = new DateTime(2016, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippedDate = new DateTime(2016, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StaffId = 2,
                            StoreId = 1
                        },
                        new
                        {
                            OrderId = 4,
                            CustomerId = 4,
                            OrderDate = new DateTime(2016, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Shipped",
                            RequiredDate = new DateTime(2016, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippedDate = new DateTime(2016, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StaffId = 2,
                            StoreId = 1
                        },
                        new
                        {
                            OrderId = 5,
                            CustomerId = 5,
                            OrderDate = new DateTime(2016, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Shipped",
                            RequiredDate = new DateTime(2016, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippedDate = new DateTime(2016, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StaffId = 3,
                            StoreId = 1
                        });
                });

            modelBuilder.Entity("Stores.Model.Entity.Sales.OrderItem", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnName("order_id")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id")
                        .HasColumnType("int");

                    b.Property<double>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("float");

                    b.Property<decimal>("ListPrice")
                        .HasColumnName("list_price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ItemId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_itmes");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            ItemId = 1,
                            Discount = 0.20000000000000001,
                            ListPrice = 600m,
                            ProductId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 1,
                            ItemId = 2,
                            Discount = 0.070000000000000007,
                            ListPrice = 860m,
                            ProductId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 2,
                            ItemId = 3,
                            Discount = 0.20000000000000001,
                            ListPrice = 330m,
                            ProductId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 3,
                            ItemId = 4,
                            Discount = 0.20000000000000001,
                            ListPrice = 210m,
                            ProductId = 4,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 4,
                            ItemId = 5,
                            Discount = 0.20000000000000001,
                            ListPrice = 380m,
                            ProductId = 5,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 5,
                            ItemId = 5,
                            Discount = 0.20000000000000001,
                            ListPrice = 380m,
                            ProductId = 5,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("Stores.Model.Entity.Sales.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("staff_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnName("active")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManagerId")
                        .HasColumnName("manager_id")
                        .HasColumnType("int");

                    b.Property<int?>("MangerStaffId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("int");

                    b.HasKey("StaffId");

                    b.HasIndex("MangerStaffId");

                    b.HasIndex("StoreId");

                    b.ToTable("staffs");

                    b.HasData(
                        new
                        {
                            StaffId = 1,
                            Active = true,
                            Email = "fabiola.jackson@bikes.shop",
                            FirstName = "Fabiola",
                            LastName = "Jackson",
                            ManagerId = 0,
                            Phone = "(831) 555-5554",
                            StoreId = 1
                        },
                        new
                        {
                            StaffId = 2,
                            Active = true,
                            Email = "mireya.copeland@bikes.shop",
                            FirstName = "Mireya",
                            LastName = "Copeland",
                            ManagerId = 1,
                            Phone = "(831) 555-5555",
                            StoreId = 1
                        },
                        new
                        {
                            StaffId = 3,
                            Active = true,
                            Email = "genna.serrano@bikes.shop",
                            FirstName = "Genna",
                            LastName = "Serrano",
                            ManagerId = 1,
                            Phone = "(831) 555-5556",
                            StoreId = 1
                        });
                });

            modelBuilder.Entity("Stores.Model.Entity.Sales.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("store_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .HasColumnName("store_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnName("zip_code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreId");

                    b.ToTable("stores");

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            City = "Santa Cruz",
                            Email = "santacruz@bikes.shop",
                            Phone = "(831) 476-4321",
                            State = "CA",
                            StoreName = "Santa Cruz Bikes",
                            Street = "3700 Portola Drive",
                            ZipCode = "95060"
                        });
                });

            modelBuilder.Entity("Stores.Model.Entity.Production.Product", b =>
                {
                    b.HasOne("Stores.Model.Entity.Production.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stores.Model.Entity.Production.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stores.Model.Entity.Production.Stock", b =>
                {
                    b.HasOne("Stores.Model.Entity.Production.Product", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stores.Model.Entity.Sales.Store", "Store")
                        .WithMany("Stocks")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stores.Model.Entity.Sales.Order", b =>
                {
                    b.HasOne("Stores.Model.Entity.Sales.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stores.Model.Entity.Sales.Staff", "Staff")
                        .WithMany("Orders")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stores.Model.Entity.Sales.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("Stores.Model.Entity.Sales.OrderItem", b =>
                {
                    b.HasOne("Stores.Model.Entity.Sales.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stores.Model.Entity.Production.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stores.Model.Entity.Sales.Staff", b =>
                {
                    b.HasOne("Stores.Model.Entity.Sales.Staff", "Manger")
                        .WithMany()
                        .HasForeignKey("MangerStaffId");

                    b.HasOne("Stores.Model.Entity.Sales.Store", "Store")
                        .WithMany("Staffs")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
